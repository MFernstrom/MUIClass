<?xml version="1.0" encoding="ISO-8859-1"?>
<fpdoc-descriptions>
<package name="MUIClass">

<!--
  ====================================================================
    MUIClass.DrawPanel
  ====================================================================
-->

<module name="MUIClass.DrawPanel">
<short>Generic class for Drawing capturing all mouse and key events.</short>
<descr>
</descr>

<!-- uses unit Visibility: default -->
<element name="System">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- uses unit Visibility: default -->
<element name="Classes">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- uses unit Visibility: default -->
<element name="SysUtils">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- uses unit Visibility: default -->
<element name="fgl">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- uses unit Visibility: default -->
<element name="Math">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- uses unit Visibility: default -->
<element name="Exec">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- uses unit Visibility: default -->
<element name="Utility">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- uses unit Visibility: default -->
<element name="AmigaDOS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- uses unit Visibility: default -->
<element name="Intuition">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- uses unit Visibility: default -->
<element name="icon">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- uses unit Visibility: default -->
<element name="AGraphics">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- uses unit Visibility: default -->
<element name="inputevent">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- uses unit Visibility: default -->
<element name="keymap">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- uses unit Visibility: default -->
<element name="layers">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- uses unit Visibility: default -->
<element name="mui">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- uses unit Visibility: default -->
<element name="muihelper">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- uses unit Visibility: default -->
<element name="tagsparamshelper">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- uses unit Visibility: default -->
<element name="MUIClass.Base">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- uses unit Visibility: default -->
<element name="MUIClass.Area">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- enumeration type Visibility: default -->
<element name="TMUIMouseBtn">
<short>Defines which mouse button was Pressed or released</short>
<seealso>
  <link id="TMUIDrawPanel.OnMouseDown">DrawPanel.OnMouseDown</link>
  <link id="TMUIDrawPanel.OnMouseUp">DrawPanel.OnMouseUp</link>
</seealso>
</element>

<!-- enumeration value Visibility: default -->
<element name="TMUIMouseBtn.mmbLeft">
<short>Left Button was pressed or released</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TMUIMouseBtn.mmbMiddle">
<short>Middle Button was pressed or released</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TMUIMouseBtn.mmbRight">
<short>Right Button was pressed or released (Menu Button)</short>
</element>

<!-- set type Visibility: default -->
<element name="TMUIShiftState">
<short>Which modifier Key is pressed together with a normal key</short>
<seealso>
  <link id="TMUIDrawPanel.OnKeyDown">DrawPanel.OnKeyDown</link>
  <link id="TMUIDrawPanel.OnKeyDown">DrawPanel.OnKeyUp</link>
</seealso>
</element>

<!-- enumeration value Visibility: default -->
<element name="TMUIShiftState.mssShift">
<short>Right or left Shift</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TMUIShiftState.mssCtrl">
<short>Control key</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TMUIShiftState.mssLShift">
<short>Left Shift</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TMUIShiftState.mssRShift">
<short>Right Shift</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TMUIShiftState.mssLAlt">
<short>LEft Alt</short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TMUIShiftState.mssRAlt">
<short>Right Alt</short>
</element>

<!-- procedure type Visibility: default -->
<element name="TMUIDrawEvent">
<short>Event type for <link id="TMUIDrawPanel.OnDrawObject">DrawPanel.OnDrawObject</link></short>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="TMUIDrawEvent.Sender">
<short>the <link id="TMUIDrawPanel">DrawPanel</link> who wants to be drawn.</short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIDrawEvent.Rp">
<short>Rastport of the object, Draw into</short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIDrawEvent.DrawRect">
<short>Only draw inside the DrawRect, (outside will be clipped)</short>
</element>

<!-- procedure type Visibility: default -->
<element name="TMUIMouseEvent">
<short>Event type for all kind of Mouse action</short>
<seealso>
  <link id="TMUIDrawPanel.OnMouseDown">DrawPanel.OnMouseDownp</link>
  <link id="TMUIDrawPanel.OnMouseUp">DrawPanel.OnMouseUp</link>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="TMUIMouseEvent.Sender">
<short>The object sending the Mouse action</short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIMouseEvent.MouseBtn">
<short>Which button triggered the Event</short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIMouseEvent.X">
<short>Current x position of the Mouse, relative to the objects left position</short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIMouseEvent.Y">
<short>Current y position of the Mouse, relative to the objects top position</short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIMouseEvent.EatEvent">
<short>Return False if the Event should be sent to the underlaying objects as well.</short>
</element>

<!-- procedure type Visibility: default -->
<element name="TMUIMouseWheel">
<short>Event for Mousewheel movement</short>
<seealso>
  <link id="TMUIDrawPanel.OnMouseWheel">DrawPanel.OnMouseWheel</link>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="TMUIMouseWheel.Sender">
<short>Which object got this wheel movement</short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIMouseWheel.ScrollUp">
<short>True if the wheel is scrolled up, false = down</short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIMouseWheel.EatEvent">
<short>Return False if the Event should be sent to the underlaying objects as well.</short>
</element>

<!-- procedure type Visibility: default -->
<element name="TMUIMouseMove">
<short>Event for mouse movement</short>
<descr>
</descr>
<seealso>
  <link id="TMUIDrawPanel.OnMouseMove">DrawPanel.OnMouseMove</link>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="TMUIMouseMove.Sender">
<short>Which Object triggered the movement</short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIMouseMove.X">
<short>Current x position of the Mouse, relative to the objects left position</short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIMouseMove.Y">
<short>Current y position of the Mouse, relative to the objects top position</short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIMouseMove.EatEvent">
<short>Return False if the Event should be sent to the underlaying objects as well.</short>
</element>

<!-- procedure type Visibility: default -->
<element name="TMUIKeyEvent">
<short>Event if a key got pressed down or released</short>
<seealso>
  <link id="TMUIDrawPanel.OnKeyDown">DrawPanel.OnKeyDown</link>
  <link id="TMUIDrawPanel.OnKeyUp">DrawPanel.OnKeyUp</link>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="TMUIKeyEvent.Sender">
<short>Object who got the key event</short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIKeyEvent.Shift">
<short>Which modifiers are pressed together</short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIKeyEvent.Code">
<short>KeyCode of the pressed/released key</short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIKeyEvent.Key">
<short>Pressed Key as character, if applicable or #0</short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIKeyEvent.EatEvent">
<short>Return False if the Event should be sent to the underlaying objects as well.</short>
</element>

<!-- record type Visibility: default -->
<element name="TMouseClickTime">
<short>Internal class to keep click times for the double click timer</short>
<seealso>
  <link id="TMUIDrawPanel.OnDblClick">DrawPanel.OnDblClick</link>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TMouseClickTime.LSecs">
<short>Time in seconds the Left Mouse button was pressed last time</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TMouseClickTime.LMicros">
<short>Additional milliseconds when the left mouse button was pressed</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TMouseClickTime.MSecs">
<short>Time in seconds the middle Mouse button was pressed last time</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TMouseClickTime.MMicros">
<short>Additional milliseconds when the middle mouse button was pressed</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TMouseClickTime.RSecs">
<short>Time in seconds the right Mouse button was pressed last time</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TMouseClickTime.RMicros">
<short>Additional milliseconds when the right mouse button was pressed</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- class Visibility: default -->
<element name="TDrawBuffer">
<short>A off screeen DrawBuffer for flicker free drawing.</short>
<descr>
<p>It will create a Bitmap and a Layer with the given size. and provide the RasPort to draw into.</p>
<p><b>Example:</b></p>
<code>
procedure TMyWindow.DrawObjectEvent(Sender: TObject; RP: PRastPort; DrawRect: TRect); // Paint Event
begin
  if not Assigned(DB) then // Create a Image Buffer to paint on (create in the first Draw Event, to have the friend Bitmap)
  begin
    DB := TDrawBuffer.Create(256, 256, RP^.Bitmap^.Depth, RP^.Bitmap);
    SetAPen(DB.RP, 2);  // fill it with white color
    RectFill(DB.RP, 0, 0, 256, 256);
  end;
  ClipBlit(DB.Rp, 0, 0, RP, DrawRect.Left, DrawRect.Top, DB.Width, DB.Height, $00C0); // Just draw the picture
end;

// Somewhere else (for example in Mouse move or button press)
GFXMove(DB.RP, x1, y1); // draw a line (x1, y1, x2, y2)
Draw(DB.RP, x2, y2);
DrawPanel.RedrawObject; // let the Panel redraw
</code>
</descr>
<seealso>
  <link id="TMUIDrawPanel.OnDrawObject">DrawPanel.OnDrawObject</link>
</seealso>
</element>

<!-- variable Visibility: public -->
<element name="TDrawBuffer.RP">
<short>The Buffer Rastport to draw</short>
</element>

<!-- variable Visibility: public -->
<element name="TDrawBuffer.Width">
<short>Width of the created Buffer</short>
</element>

<!-- variable Visibility: public -->
<element name="TDrawBuffer.Height">
<short>Height of the created Buffer</short>
</element>

<!-- constructor Visibility: public -->
<element name="TDrawBuffer.Create">
<short>Create a new DrawBuffer</short>
</element>

<!-- argument Visibility: default -->
<element name="TDrawBuffer.Create.AWidth">
<short>Define the Width of the Buffer</short>
</element>

<!-- argument Visibility: default -->
<element name="TDrawBuffer.Create.AHeight">
<short>Define the Height of the Buffer</short>
</element>

<!-- argument Visibility: default -->
<element name="TDrawBuffer.Create.ADepth">
<short>Define the Depth of the Buffer</short>
</element>

<!-- argument Visibility: default -->
<element name="TDrawBuffer.Create.AFriend">
<short>Define a friend Bitmap, for faster clipping to.</short>
</element>

<!-- destructor Visibility: public -->
<element name="TDrawBuffer.Destroy">
<short>Destroy the DrawBuffer and free all Bitmap, Layers and RastPorts</short>
</element>

<!-- class Visibility: default -->
<element name="TMUIDrawPanel">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- function Visibility: protected -->
<element name="TMUIDrawPanel.MUIEvent">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- function result Visibility: protected -->
<element name="TMUIDrawPanel.MUIEvent.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIDrawPanel.MUIEvent.cl">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIDrawPanel.MUIEvent.Obj">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIDrawPanel.MUIEvent.Msg">
<short></short>
</element>

<!-- function Visibility: protected -->
<element name="TMUIDrawPanel.DoSetup">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- function result Visibility: protected -->
<element name="TMUIDrawPanel.DoSetup.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIDrawPanel.DoSetup.cl">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIDrawPanel.DoSetup.Obj">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIDrawPanel.DoSetup.Msg">
<short></short>
</element>

<!-- function Visibility: protected -->
<element name="TMUIDrawPanel.DoCleanup">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- function result Visibility: protected -->
<element name="TMUIDrawPanel.DoCleanup.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIDrawPanel.DoCleanup.cl">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIDrawPanel.DoCleanup.Obj">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIDrawPanel.DoCleanup.Msg">
<short></short>
</element>

<!-- function Visibility: protected -->
<element name="TMUIDrawPanel.DoAskMinMax">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- function result Visibility: protected -->
<element name="TMUIDrawPanel.DoAskMinMax.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIDrawPanel.DoAskMinMax.cl">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIDrawPanel.DoAskMinMax.Obj">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIDrawPanel.DoAskMinMax.Msg">
<short></short>
</element>

<!-- function Visibility: protected -->
<element name="TMUIDrawPanel.DoDraw">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- function result Visibility: protected -->
<element name="TMUIDrawPanel.DoDraw.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIDrawPanel.DoDraw.cl">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIDrawPanel.DoDraw.Obj">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIDrawPanel.DoDraw.Msg">
<short></short>
</element>

<!-- function Visibility: protected -->
<element name="TMUIDrawPanel.DoHandleEvent">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- function result Visibility: protected -->
<element name="TMUIDrawPanel.DoHandleEvent.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIDrawPanel.DoHandleEvent.cl">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIDrawPanel.DoHandleEvent.Obj">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="TMUIDrawPanel.DoHandleEvent.Msg">
<short></short>
</element>

<!-- procedure Visibility: protected -->
<element name="TMUIDrawPanel.ResetDblClickTime">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- procedure Visibility: protected -->
<element name="TMUIDrawPanel.GetCreateTags">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="TMUIDrawPanel.GetCreateTags.ATagList">
<short></short>
</element>

<!-- constructor Visibility: public -->
<element name="TMUIDrawPanel.Create">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- procedure Visibility: public -->
<element name="TMUIDrawPanel.CreateObject">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- procedure Visibility: public -->
<element name="TMUIDrawPanel.RedrawObject">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TMUIDrawPanel.MinWidth">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TMUIDrawPanel.MinHeight">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TMUIDrawPanel.MaxWidth">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TMUIDrawPanel.MaxHeight">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TMUIDrawPanel.DefWidth">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TMUIDrawPanel.DefHeight">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TMUIDrawPanel.OnDrawObject">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TMUIDrawPanel.DoDrawObject">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TMUIDrawPanel.DoDrawObject.Rp">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TMUIDrawPanel.DoDrawObject.DrawRect">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TMUIDrawPanel.OnMouseDown">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TMUIDrawPanel.OnMouseUp">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TMUIDrawPanel.OnDblClick">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TMUIDrawPanel.OnMouseWheel">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TMUIDrawPanel.OnMouseMove">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TMUIDrawPanel.OnMouseLeave">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TMUIDrawPanel.OnKeyDown">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TMUIDrawPanel.OnKeyUp">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TMUIDrawPanel.FillArea">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TMUIDrawPanel.Width">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- property Visibility: public -->
<element name="TMUIDrawPanel.Height">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="MUIPBType">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

</module> <!-- MUIClass.DrawPanel -->

</package>
</fpdoc-descriptions>
